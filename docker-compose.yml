version: "3.7"
services:
  mongodb:
    image: mongo:6.0.6
    container_name: 'mongo'
    restart: always
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  rabbitmq:
    image: rabbitmq:3.11.17-management-alpine
    container_name: 'rabbitmq'
    restart: always
    environment:
      - "RABBITMQ_DEFAULT_USER=username"
      - "RABBITMQ_DEFAULT_PASS=password"
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  orderservice:
    build: src/order-service
    container_name: 'orderservice'
    restart: always
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://orderservice:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_PROTOCOL=amqp
      - ORDER_QUEUE_HOSTNAME=rabbitmq
      - ORDER_QUEUE_PORT=5672
      - ORDER_QUEUE_USERNAME=username
      - ORDER_QUEUE_PASSWORD=password
    networks:
      - backend_services
    depends_on:
      rabbitmq:
        condition: service_healthy
  makelineservice:
    build: src/makeline-service
    container_name: 'makelineservice'
    restart: always
    ports:
      - 3001:3001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://makelineservice:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_CONNECTION_STRING=amqp://username:password@rabbitmq:5672/
      - ORDER_QUEUE_NAME=orders
      - ORDER_DB_CONNECTION_STRING=mongodb://mongodb:27017
      - ORDER_DB_NAME=orderdb
      - ORDER_DB_COLLECTION_NAME=orders
    networks:
      - backend_services
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
  storefront:
    build: src/store-front
    container_name: 'storefront'
    restart: always
    ports:
      - 8080:8080
    environment:
      - ORDER_SERVICE_URL=http://orderservice:3000/
    networks:
      - backend_services
    depends_on:
      orderservice:
        condition: service_healthy
  storeback:
    build: src/store-back
    container_name: 'storeback'
    restart: always
    ports:
      - 8081:8081
    environment:
      - ORDER_SERVICE_URL=http://makelineservice:3001/
    networks:
      - backend_services
    depends_on:
      makelineservice:
        condition: service_healthy
  virtualcustomer:
    build: src/virtual-customer
    container_name: 'virtualcustomer'
    restart: always
    environment:
      - ORDER_SERVICE_URL=http://orderservice:3000/
      - ORDERS_PER_HOUR=500
    networks:
      - backend_services
    depends_on:
      orderservice:
        condition: service_healthy
  virtualworker:
    build: src/virtual-worker
    container_name: 'virtualworker'
    restart: always
    environment:
      - MAKELINE_SERVICE_URL=http://makelineservice:3001
      - ORDERS_PER_HOUR=400
    networks:
      - backend_services
    depends_on:
      makelineservice:
        condition: service_healthy
  aiservice:
    build: src/ai-service
    container_name: 'aiservice'
    restart: always
    ports:
      - 5001:5001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://aiservice:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - AZURE_OPENAI_DEPLOYMENT_NAME=
      - AZURE_OPENAI_ENDPOINT=
      - AZURE_OPENAI_API_KEY=
    networks:
      - backend_services
networks:
  backend_services:
    driver: bridge